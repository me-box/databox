#!/bin/bash

#makesure we are in the right dir
MY_PATH="`dirname \"$0\"`"              # relative
MY_PATH="`( cd \"$MY_PATH\" && pwd )`"  # absolutized and normalized
cd "${MY_PATH}"
export DATABOX_PATH="${MY_PATH}"

#include helper functions
source ./scripts/utils.sh

## debug
if [[ "$DATABOX_DEBUG" = "true" ]]; then
  set -x
  PS4='$LINENO: '
fi

declare -r ME="$(basename $0)"

## check we have the tools
if ! [ -x "$(command -v docker)" ]; then
  die 1 "docker is not installed;"`
       `"see https://docs.docker.com/engine/installation/"
fi

if ! [ -x "$(command -v docker-compose)" ]; then
  die 2 "docker-compose is not installed;"`
       `"see https://docs.docker.com/compose/install/#install-compose"
fi

## parse command line args
DOCKER_REPO="" #default to local images
DATABOX_SDK="0"
DATABOX_DEV="0"
DEV=0
SDK=0
LATEST=0
case "$1" in
  dev )
    DEV=1
    export DATABOX_DEV="1"
    ;;
  latest )
    LATEST=1
    export DATABOX_DEV="1"
    ;;
  sdk )
    SDK=1
    ;;
esac


#Start the SDK
if [ "$SDK" == "1" ]
then
  err "Starting SDK"
  export HOSTMOUNT=$(pwd -P)
  docker-compose -f docker-databox-sdk.yaml up -d
fi

## test if Databox is already running
err "testing if Databox is already running ..."
docker stack ps databox >/dev/null 2>&1
assert_or_die $? 1 "Databox is already running!"

## extract a host interface IP address
err "extracting host interface IP address ..."
ips=($(ifconfig | grep "inet " | grep -v 127.0.0.1 | grep -v 172. |awk 'match($0, /([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/) {print substr($0,RSTART,RLENGTH)}'))
EXT_IP=${ips}
if [[ "${#ips[@]}" -gt "1" ]]; then
  err "More than one IP found! Please select one:"
  if [[ "${DATABOX_TESTING}" == 1 ]]
  then
    err "running in testing mode using 127.0.0.1"
    EXT_IP="127.0.0.1"
  else
    select ip in ${ips[*]}; do
      case ${ip} in
        exit )
          die 0 "exiting ..."
          break
          ;;

        * )
          EXT_IP=${ip}
          break
          ;;
      esac
    done
  fi
fi
err "host interface IP address = ${EXT_IP}"

## base images: what are we running on?
ARCH=$(uname -m)
case "$ARCH" in
  armv7l )
    NODE_IMAGE="hypriot/rpi-node:slim"
    DEV=1 #ARM is only supported in dev mode with localy built images (for now)
    export DATABOX_ARCH="-"${ARCH}
    export DATABOX_DEV="1"
    ;;

  aarch64 )
    NODE_IMAGE="forumi0721alpineaarch64/alpine-aarch64-nodejs"
    DEV=1 #ARM is only supported in dev mode with localy built images (for now)
    export DATABOX_ARCH="-"${ARCH}
    export DATABOX_DEV="1"
    ;;

  * )
    ARCH=""
    NODE_IMAGE="node:alpine"
    export DATABOX_ARCH=""
    ;;
esac

DOCKER_REPO=""
DATABOX_VERSION=$(<./Version)
DATABOX_CORE_IMAGE_VERSION=$(<./Version)
# use images from https://hub.docker.com/r/databoxsystems/
DOCKER_REPO="databoxsystems/"
if [ "$DEV" == "1" ]
then
  DOCKER_REPO=""
  DATABOX_CORE_IMAGE_VERSION="latest"
  DATABOX_VERSION="latest"
fi
if [ "$LATEST" == "1" ]
then
  DOCKER_REPO="databoxsystems/"
  DATABOX_CORE_IMAGE_VERSION="latest"
  DATABOX_VERSION="latest"
fi

err "Starting version ${DATABOX_VERSION}"
export DOCKER_REPO=${DOCKER_REPO}
export DATABOX_VERSION=${DATABOX_VERSION}
export DATABOX_CORE_IMAGE_VERSION=${DATABOX_CORE_IMAGE_VERSION}

function _exec {
  docker run \
         --net=host -i --rm -v ${MY_PATH}:/cwd -w /cwd \
         ${DARGS} ${NODE_IMAGE} "$@"
}

if [ ! -d "${MY_PATH}/node_modules" ]; then
  _exec npm install -loglevel silent
fi



if [ -d "${MY_PATH}/certs" ] && [ ! -f "${MY_PATH}/certs/app-server.pem" ]; then
    echo "******************* Important Message *************************"
    echo "*    You are upgrading from an old version of databox.        *"
    echo "*    Your certificates need to be regenerated, and            *"
    echo "*    you will need to reinstall the root crt                  *"
    echo "*    on your system.                                          *"
    echo "*                                                             *"
    echo "*    Your old certs will be backed up to ./certs-old.         *"
    echo "*                                                             *"
    echo "*    press any key to continue CTRL+c to exit.                *"
    echo "****************************************************************"

    read -n 1 -s

    mv ./certs ./certs-old
fi

mkdir -p ./certs

err "Creating Certificates"
_exec node ./src/createCerts.js ${EXT_IP} ${ips[@]}

if [ "$DEV" == "1" ]
then
  # build all images locally in dev mode
  err "Building Databox localy in dev mode"
  ./databox-fetch-components
  source ./databox-build-core
  assert_or_die $? 0 "Problem building core images"
fi

docker node ls >/dev/null 2>&1
if [[ "$?" == "1" ]]
then
  err "Starting the Databox swarm"
  docker swarm init --advertise-addr ${EXT_IP} 2>&1
fi

err "Starting Databox"

docker network create -d overlay --attachable databox-system-net

docker-compose -f ./docker-core-network.yaml up -d
_exec node ./src/createResolvConf.js "$(docker inspect $(docker ps -q --filter="name=databox-network"))"

docker-compose -f ./docker-databox-appstore.yaml up -d
docker stack deploy -c docker-compose.yaml databox
assert_or_die $? 0 "Problem with docker stack deploy"

if [ "$DEV" == "1" ]
then
  err "Sleeping..."
  sleep 10
  ./databox-install-component driver-sensingkit &
  ./databox-install-component driver-os-monitor &
  ./databox-install-component app-os-monitor &
  wait
fi

err "Databox started! Visit http://localhost"
if [ -z "$DATABOX_TESTING" ]
then
  docker service logs databox_container-manager -f
fi
